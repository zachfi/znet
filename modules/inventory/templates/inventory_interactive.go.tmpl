{{- if eq .File.GetName "inventory.proto"}}
// Code generated, do not edit
package inventory

import (
	"strings"
	"os"

	prompt "github.com/c-bata/go-prompt"
	log "github.com/sirupsen/logrus"
	"github.com/olekukonko/tablewriter"
)

	{{- $messages := list "L3Network" "NetworkHost" "ZigbeeDevice" }}

type InventoryInteractive struct {
	Inventory Inventory
}

func (i *InventoryInteractive) Executor(in string) {
	in = strings.TrimSpace(in)
	blocks := strings.Split(in, " ")

	if len(blocks) < 0 {
		return
	}

	command, object, remain := blocks[0], blocks[1], blocks[2:]

	switch command {
	case "list":
		switch object {
	{{- range .File.MessageType }}
		{{- if has .GetName $messages }}
			{{- $typeName := (.GetName|snakeCase)}}
			{{- $commandName := (.GetName)}}
		case "{{$typeName}}":
			i.print{{$commandName}}s()
		{{- end }}
	{{- end }}
		}
	case "get":
		if len(remain) < 1 {
			return
		}
		item := remain[0]

		switch object {
	{{- range .File.MessageType }}
		{{- if has .GetName $messages }}
			{{- $typeName := (.GetName|snakeCase)}}
			{{- $commandName := (.GetName)}}
		case "{{$typeName}}":
			i, err := i.Inventory.Fetch{{$commandName}}(item)
			if err != nil {
				log.Error(err)
			}

			log.Infof("i: %+v", i)
		{{- end }}
	{{- end }}
		}
	case "create":
	case "set":
		if len(remain) < 2 {
			return
		}
		node := remain[0]
		attr := remain[1]
		val := remain[2]

		switch object {
	{{- range .File.MessageType }}
		{{- if has .GetName $messages }}
			{{- $typeName := (.GetName|snakeCase)}}
			{{- $commandName := (.GetName)}}
		case "{{$typeName}}":
			err := i.set{{$commandName}}Attribute(node, attr, val)
			if err != nil {
				log.Error(err)
			}

		{{- end }}
	{{- end }}
		}
	}
}

func (i *InventoryInteractive) Completer(d prompt.Document) []prompt.Suggest {
	blocks := strings.Split(d.CurrentLine(), " ")

	objects := []prompt.Suggest{
	{{- range .File.MessageType }}
		{{- if has .GetName $messages }}
			{{- $typeName := (.GetName|snakeCase)}}
			{{- $commandName := (.GetName)}}
		{Text: "{{$typeName}}", Description: "{{$commandName}} objects"},
		{{- end }}
	{{- end }}
	}

	s := []prompt.Suggest{
		{Text: "list", Description: "List objects"},
		{Text: "get", Description: "Get an object"},
		{Text: "set", Description: "Set an object attributes"},
	}

	count := len(blocks)

	if count <= 1 {
			return prompt.FilterHasPrefix(s, d.GetWordBeforeCursor(), true)
	}

	if count == 2 {
			return prompt.FilterHasPrefix(objects, d.GetWordBeforeCursor(), true)
	}

		switch blocks[0] {
		// case "list":
		case "get":
			if count > 3 {
				return []prompt.Suggest{}
			}

			switch blocks[1] {
  {{- range .File.MessageType }}
    {{- if has .GetName $messages }}
      {{- $typeName := (.GetName|snakeCase)}}
      {{- $commandName := (.GetName)}}
			case "{{$typeName}}":
        return i.suggest{{$commandName}}(d)
    {{- end }}
  {{- end }}
			}
		case "set":
			if count > 4 {
				return []prompt.Suggest{}
			}

      if count == 3 {
        switch blocks[1] {
    {{- range .File.MessageType }}
      {{- if has .GetName $messages }}
        {{- $typeName := (.GetName|snakeCase)}}
        {{- $commandName := (.GetName)}}
        case "{{$typeName}}":
          return i.suggest{{$commandName}}(d)
      {{- end }}
    {{- end }}
        }
      }

      if count == 4 {
        switch blocks[1] {
    {{- range .File.MessageType }}
      {{- if has .GetName $messages }}
        {{- $typeName := (.GetName|snakeCase)}}
        {{- $commandName := (.GetName)}}
        case "{{$typeName}}":
          return i.suggest{{$commandName}}Attributes(d)
      {{- end }}
    {{- end }}
        }
      }
	}

  return []prompt.Suggest{}
}

  {{- range .File.MessageType }}
    {{- if has .GetName $messages }}
      {{- $typeName := (.GetName|snakeCase)}}
      {{- $commandName := (.GetName)}}
func (i *InventoryInteractive) print{{$commandName}}s() {
  results, err := i.Inventory.List{{$commandName}}s()
  if err != nil {
    log.Error(err)
  }

  data := make([][]string, 0)

  for _, r := range results {
    data = append(data, []string{
        {{- range .Field }}
          {{- if eq .GetType.String "TYPE_STRING" }}
              {{- if eq .GetLabel.String "LABEL_REPEATED" }}
              {{- else }}
          r.Get{{.Name|camelCase}}(),
              {{- end }}
          {{- end }}
        {{- end }}
    })
  }

  table := tablewriter.NewWriter(os.Stdout)
  table.SetHeader([]string{
      {{- range .Field }}
          {{- if eq .GetType.String "TYPE_STRING" }}
              {{- if eq .GetLabel.String "LABEL_REPEATED" }}
              {{- else }}
    "{{.GetName}}",
              {{- end }}
          {{- end }}
      {{- end }}
  })

  table.SetAutoWrapText(false)
  table.SetAutoFormatHeaders(true)
  table.SetHeaderAlignment(tablewriter.ALIGN_LEFT)
  table.SetAlignment(tablewriter.ALIGN_LEFT)
  table.SetHeaderLine(false)
  table.SetBorder(false)
  table.SetColumnSeparator("")

  for _, v := range data {
      table.Append(v)
  }

  table.Render()
}
    {{- end }}
  {{- end }}

  {{- range .File.MessageType }}
    {{- if has .GetName $messages }}
      {{- $typeName := (.GetName|snakeCase)}}
      {{- $commandName := (.GetName)}}
func (i *InventoryInteractive) suggest{{$commandName}}(d prompt.Document) []prompt.Suggest {
  sugg := []prompt.Suggest{}
  results, err := i.Inventory.List{{$commandName}}s()
  if err != nil {
    log.Error(err)
    return []prompt.Suggest{}
  }

  for _, r := range results {
    sugg = append(sugg, prompt.Suggest{Text: r.GetName(), Description: r.GetDescription()})
  }

  return prompt.FilterHasPrefix(sugg, d.GetWordBeforeCursor(), true)
}

func (i *InventoryInteractive) suggest{{$commandName}}Attributes(d prompt.Document) []prompt.Suggest {
sugg := []prompt.Suggest{
	{{- range .Field }}
		{{- if eq .GetType.String "TYPE_STRING" }}
			{{- if eq .GetLabel.String "LABEL_REPEATED" }}
			{{- else }}
		prompt.Suggest{Text: "{{.GetName}}"},
			{{- end }}
		{{- end }}
	{{- end }}

	}
	return prompt.FilterHasPrefix(sugg, d.GetWordBeforeCursor(), true)
}

func (i *InventoryInteractive) set{{$commandName}}Attribute(node, attr, val string) error {
	x, err := i.Inventory.Fetch{{$commandName}}(node)
	if err != nil {
		return err
	}

	switch attr {
	{{- range .Field }}
		{{- if eq .GetType.String "TYPE_STRING" }}
			{{- if eq .GetLabel.String "LABEL_REPEATED" }}
			{{- else }}
	case "{{.GetName}}":
		x.{{.GetName|camelCase}} = val
			{{- end }}
		{{- end }}
	{{- end }}
	}

	x, err = i.Inventory.Update{{$commandName}}(x)
	if err != nil {
		return err
	}

	return nil
}

		{{- end }}
	{{- end }}

{{- end }}
