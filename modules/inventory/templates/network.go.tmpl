{{- if eq .File.GetName "inventory.proto"}}
// Code generated, do not edit
package inventory

import (
	"fmt"
	"strconv"
	"time"

	ldap "github.com/go-ldap/ldap/v3"
	"github.com/go-kit/log/level"
	"google.golang.org/protobuf/types/known/timestamppb"
)

	{{- $messages := list "Inet6Network" "InetNetwork" "L3Network" "NetworkHost" "NetworkID" "ZigbeeDevice" "IOTZone" }}
	{{- range .File.MessageType }}
		{{- if has .GetName $messages }}
			{{- $typename := (.GetName|snakeCase)}}

var default{{.GetName}}Attributes = []string{
	{{- range $i, $message := .GetField }}
		{{- $attr := list $typename (.GetJsonName |snakeCase) | join "_" | lowerCamelCase}}
		{{- if has .GetJsonName (list "cn" "macAddress" "dn") }}
	"{{.GetJsonName}}",
		{{- else if has .GetJsonName (list "name") }}
	"cn",
		{{- else }}
			"{{$attr}}",
		{{- end }}
	{{- end }}
}

// Create{{.GetName}} creates a new LDAP entry by the received name.
func (i *LDAPInventory) Create{{.GetName}}(x *{{.GetName}}) (*{{.GetName}}, error) {
  if x == nil {
    return nil, fmt.Errorf("unable to create nil {{.GetName}}")
  }

	{{- $objectClass := .GetName | kebabCase | lowerCamelCase }}
  if x.Name == "" {
    return nil, fmt.Errorf("unable to create a node with no Name set")
  }

  var err error

	dn := fmt.Sprintf("cn=%s,ou=zigbee,ou=network,%s", x.Name, i.cfg.BaseDN)
  x.Dn = dn

	a := ldap.NewAddRequest(dn, []ldap.Control{})
	a.Attribute("objectClass", []string{"{{$objectClass}}", "top"})
  {{- range $i, $message := .GetField }}
    {{- $attr := list $typename (.GetJsonName |snakeCase) | join "_" | lowerCamelCase}}
		{{- if eq .GetType.String "TYPE_STRING" }}
      {{- if eq .GetName "name" }}
	a.Attribute("cn", []string{x.{{.GetName | camelCase}}})
      {{- end }}
    {{- else }}
    {{- end }}
  {{- end }}

  level.Debug(i.logger).Log("msg", "creating new {{$objectClass}}", "class", fmt.Sprintf("%+v", a))

	err = i.ldapClient.Add(a)
	if err != nil {
		return nil, err
	}

	return i.Update{{.GetName}}(x)
}

// Update{{.GetName}} updates an existing LDAP entry, retrieved by name.
func (i *LDAPInventory) Update{{.GetName}}(x *{{.GetName}}) (*{{.GetName}}, error) {
  if x == nil {
    return nil, fmt.Errorf("unable to update nil {{.GetName}}")
  }

	{{- $objectClass := .GetName | kebabCase | lowerCamelCase }}
	if x.Dn == "" {
		return nil, fmt.Errorf("unable to update a node with no Dn set")
	}

  var err error

	a := ldap.NewModifyRequest(x.Dn, []ldap.Control{})

  {{- range $i, $message := .GetField }}
    {{- $attr := list $typename (.GetJsonName |snakeCase) | join "_" | lowerCamelCase}}
		{{- $method := "" }}
		{{- if eq .GetLabel.String "REPEATED" }}
      {{- /* TODO Trying to work out the details here about type references */}}
			{{- $method = "Add" }}
		{{- else }}
			{{- $method = "Replace" }}
		{{- end }}
		{{- if eq .GetType.String "TYPE_BOOL" }}
    // TODO figure out the how we can avoid replacing the bool...
    // in case its not set on the update.
    // Replace the bool
    a.{{$method}}("{{.GetJsonName}}", []string{strconv.FormatBool(x.{{.GetName | camelCase}})})

    {{- else if eq .GetType.String "TYPE_STRING" }}
      {{- if has .GetName (list "name" "dn") }}
      {{- /* skip updating the name */}}
      {{- else }}
        {{- if eq .GetLabel.String "LABEL_REPEATED" }}
    if x.{{.GetName | camelCase}} != nil {
          {{- if has .GetJsonName (list "macAddress")}}
      a.{{$method}}("{{.GetJsonName}}", x.{{.GetName | camelCase}})
          {{- else }}
      a.{{$method}}("{{$attr}}", x.{{.GetName | camelCase}})
          {{- end }}
    }
        {{- else }}
    if x.{{.GetName | camelCase}} != "" {
      a.{{$method}}("{{$attr}}", []string{x.{{.GetName | camelCase}}})
    }
        {{- end }}
      {{- end }}
		{{- else if eq .GetType.String "TYPE_MESSAGE" }}
			{{- if eq .GetTypeName ".google.protobuf.Timestamp" }}
    if x.{{.GetName | camelCase}} != nil {
      a.{{$method}}("{{$attr}}", []string{x.LastSeen.AsTime().Format(time.RFC3339)})
    }
			{{- end }}
		{{- else }}
	// unknown attribute type: {{.GetType}}
		{{- end }}
  {{- end }}

  level.Debug(i.logger).Log("msg", "updating {{$objectClass}}", "class", fmt.Sprintf("%+v", a))

	err = i.ldapClient.Modify(a)
	if err != nil {
		return nil, err
	}

	return i.Fetch{{.GetName}}(x.Name)
}

// Fetch{{.GetName}} will retrieve a {{.GetName}} by name.
func (i *LDAPInventory) Fetch{{.GetName}}(name string) (*{{.GetName}}, error) {
	{{- $varname := .GetName|snakeCase|lowerCamelCase}}

	results, err := i.List{{.GetName}}s()
	if err != nil {
		return nil, err
	}

	if results != nil {
		for _, x := range results {
			if x.Name == name {
				return &x, nil
			}
		}
	}

	return nil, fmt.Errorf("{{$varname}} not found: %s", name)
}

// List{{.GetName}}s retrieves all existing LDAP entries.
// nolint:gocyclo
func (i *LDAPInventory) List{{.GetName}}s() ([]{{.GetName}}, error) {
	if i.ldapClient == nil {
		return nil, fmt.Errorf("unable to List{{.GetName}}s() with nil LDAP client")
	}

  var xxx []{{.GetName}}

	{{- $objectClass := .GetName | kebabCase | lowerCamelCase }}
	searchRequest := ldap.NewSearchRequest(
		i.cfg.BaseDN,
		ldap.ScopeWholeSubtree, ldap.NeverDerefAliases, 0, 0, false,
		"(&(objectClass={{$objectClass}})(cn=*))",
    default{{.GetName}}Attributes,
		nil,
	)

	var searchResult *ldap.SearchResult
  attempts := 0
  for attempts < 3 {
    attempts += 1
    sr, err := i.ldapClient.Search(searchRequest)
    if err != nil && ldap.IsErrorWithCode(err, 200) {
      level.Info(i.logger).Log("msg", "connection is closed, trying to reconnect")
      if err = i.reconnect(); err != nil {
        return nil, err
      }
    } else if err != nil {
      return nil, err
    }
    searchResult = sr
    break
  }

	// log.Tracef("search response: %+v", searchResult)

	for _, e := range searchResult.Entries {
		h := {{.GetName}}{Dn: e.DN}

		for _, a := range e.Attributes {
			switch a.Name {

	{{- range $i, $message := .GetField }}
		{{- $attr := list $typename (.GetJsonName |snakeCase) | join "_" | lowerCamelCase}}
		{{- $method := "" }}
		{{- if eq .GetLabel.String "REPEATED" }}
      {{- /* TODO Trying to work out the details here about type references */}}
			{{- $method = "Add" }}
		{{- else }}
			{{- $method = "Replace" }}
		{{- end }}
		{{- if has .GetJsonName (list "macAddress")}}
			case "{{.GetJsonName}}":
		{{- else if has .GetJsonName (list "dn")}}
		{{- else if has .GetJsonName (list "name")}}
			case "cn":
		{{- else }}
			case "{{$attr}}":
		{{- end }}

		{{- if eq .GetType.String "TYPE_STRING" }}
			{{- if eq .GetLabel.String "LABEL_REPEATED" }}
				attrs := []string{}
				attrs = append(attrs, stringValues(a)...)
				h.{{.GetName | camelCase}} = attrs
			{{- else }}
				{{- if has .GetJsonName (list "dn")}}
				{{- else }}
					h.{{.GetName | camelCase}} = stringValues(a)[0]
				{{- end }}
			{{- end }}
		{{- else if eq .GetType.String "TYPE_BOOL" }}
			{{- if eq .GetLabel.String "LABEL_REPEATED" }}
				attrs := []string{}
				attrs = append(attrs, boolValues(a, i.logger)...)
				h.{{.GetName | camelCase}} = attrs
			{{- else }}
				v := boolValues(a, i.logger)[0]
				h.{{.GetName | camelCase}} = v
			{{- end }}
		{{- else if eq .GetType.String "TYPE_MESSAGE" }}
			{{- if eq .GetTypeName ".google.protobuf.Timestamp" }}
				attrs := []time.Time{}

				for _, v := range stringValues(a) {
					t, err := time.Parse(time.RFC3339, v)
					if err != nil {
					  level.Error(i.logger).Log("msg", "unable to parse time", "err", err)
						continue
					}

					attrs = append(attrs, t)
				}

				h.{{.GetName | camelCase}} = timestamppb.New(attrs[0])
			{{- end }}
		{{- else }}
		// unknown attribute type: {{.GetType}}
		{{- end }}

  {{- end }}
			}
		}

		xxx = append(xxx, h)
	}

	return xxx, nil
}
    {{- end }}
{{- end }}
{{- end }}
