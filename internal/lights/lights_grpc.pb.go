// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lights

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LightsClient is the client API for Lights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightsClient interface {
	Alert(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error)
	Dim(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error)
	Off(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error)
	On(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error)
	RandomColor(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error)
	SetColor(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error)
	Toggle(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error)
}

type lightsClient struct {
	cc grpc.ClientConnInterface
}

func NewLightsClient(cc grpc.ClientConnInterface) LightsClient {
	return &lightsClient{cc}
}

func (c *lightsClient) Alert(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/Alert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) Dim(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/Dim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) Off(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/Off", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) On(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/On", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) RandomColor(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/RandomColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) SetColor(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/SetColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightsClient) Toggle(ctx context.Context, in *LightGroupRequest, opts ...grpc.CallOption) (*LightResponse, error) {
	out := new(LightResponse)
	err := c.cc.Invoke(ctx, "/lights.Lights/Toggle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightsServer is the server API for Lights service.
// All implementations must embed UnimplementedLightsServer
// for forward compatibility
type LightsServer interface {
	Alert(context.Context, *LightGroupRequest) (*LightResponse, error)
	Dim(context.Context, *LightGroupRequest) (*LightResponse, error)
	Off(context.Context, *LightGroupRequest) (*LightResponse, error)
	On(context.Context, *LightGroupRequest) (*LightResponse, error)
	RandomColor(context.Context, *LightGroupRequest) (*LightResponse, error)
	SetColor(context.Context, *LightGroupRequest) (*LightResponse, error)
	Toggle(context.Context, *LightGroupRequest) (*LightResponse, error)
	mustEmbedUnimplementedLightsServer()
}

// UnimplementedLightsServer must be embedded to have forward compatible implementations.
type UnimplementedLightsServer struct {
}

func (UnimplementedLightsServer) Alert(context.Context, *LightGroupRequest) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alert not implemented")
}
func (UnimplementedLightsServer) Dim(context.Context, *LightGroupRequest) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dim not implemented")
}
func (UnimplementedLightsServer) Off(context.Context, *LightGroupRequest) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Off not implemented")
}
func (UnimplementedLightsServer) On(context.Context, *LightGroupRequest) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method On not implemented")
}
func (UnimplementedLightsServer) RandomColor(context.Context, *LightGroupRequest) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomColor not implemented")
}
func (UnimplementedLightsServer) SetColor(context.Context, *LightGroupRequest) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetColor not implemented")
}
func (UnimplementedLightsServer) Toggle(context.Context, *LightGroupRequest) (*LightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Toggle not implemented")
}
func (UnimplementedLightsServer) mustEmbedUnimplementedLightsServer() {}

// UnsafeLightsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightsServer will
// result in compilation errors.
type UnsafeLightsServer interface {
	mustEmbedUnimplementedLightsServer()
}

func RegisterLightsServer(s grpc.ServiceRegistrar, srv LightsServer) {
	s.RegisterService(&Lights_ServiceDesc, srv)
}

func _Lights_Alert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Alert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/Alert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Alert(ctx, req.(*LightGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_Dim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Dim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/Dim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Dim(ctx, req.(*LightGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_Off_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Off(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/Off",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Off(ctx, req.(*LightGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_On_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).On(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/On",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).On(ctx, req.(*LightGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_RandomColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).RandomColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/RandomColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).RandomColor(ctx, req.(*LightGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_SetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).SetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/SetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).SetColor(ctx, req.(*LightGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lights_Toggle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightsServer).Toggle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lights.Lights/Toggle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightsServer).Toggle(ctx, req.(*LightGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lights_ServiceDesc is the grpc.ServiceDesc for Lights service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lights_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lights.Lights",
	HandlerType: (*LightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alert",
			Handler:    _Lights_Alert_Handler,
		},
		{
			MethodName: "Dim",
			Handler:    _Lights_Dim_Handler,
		},
		{
			MethodName: "Off",
			Handler:    _Lights_Off_Handler,
		},
		{
			MethodName: "On",
			Handler:    _Lights_On_Handler,
		},
		{
			MethodName: "RandomColor",
			Handler:    _Lights_RandomColor_Handler,
		},
		{
			MethodName: "SetColor",
			Handler:    _Lights_SetColor_Handler,
		},
		{
			MethodName: "Toggle",
			Handler:    _Lights_Toggle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/lights/lights.proto",
}
