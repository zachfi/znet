// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package agent

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JailHostClient is the client API for JailHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JailHostClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Jails, error)
	Restart(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error)
	Start(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error)
	Stop(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error)
}

type jailHostClient struct {
	cc grpc.ClientConnInterface
}

func NewJailHostClient(cc grpc.ClientConnInterface) JailHostClient {
	return &jailHostClient{cc}
}

func (c *jailHostClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Jails, error) {
	out := new(Jails)
	err := c.cc.Invoke(ctx, "/agent.JailHost/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jailHostClient) Restart(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.JailHost/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jailHostClient) Start(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.JailHost/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jailHostClient) Stop(ctx context.Context, in *Jail, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.JailHost/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JailHostServer is the server API for JailHost service.
// All implementations must embed UnimplementedJailHostServer
// for forward compatibility
type JailHostServer interface {
	List(context.Context, *Empty) (*Jails, error)
	Restart(context.Context, *Jail) (*CommandResult, error)
	Start(context.Context, *Jail) (*CommandResult, error)
	Stop(context.Context, *Jail) (*CommandResult, error)
	mustEmbedUnimplementedJailHostServer()
}

// UnimplementedJailHostServer must be embedded to have forward compatible implementations.
type UnimplementedJailHostServer struct {
}

func (UnimplementedJailHostServer) List(context.Context, *Empty) (*Jails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedJailHostServer) Restart(context.Context, *Jail) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedJailHostServer) Start(context.Context, *Jail) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJailHostServer) Stop(context.Context, *Jail) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJailHostServer) mustEmbedUnimplementedJailHostServer() {}

// UnsafeJailHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JailHostServer will
// result in compilation errors.
type UnsafeJailHostServer interface {
	mustEmbedUnimplementedJailHostServer()
}

func RegisterJailHostServer(s grpc.ServiceRegistrar, srv JailHostServer) {
	s.RegisterService(&JailHost_ServiceDesc, srv)
}

func _JailHost_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JailHostServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.JailHost/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JailHostServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JailHost_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JailHostServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.JailHost/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JailHostServer).Restart(ctx, req.(*Jail))
	}
	return interceptor(ctx, in, info, handler)
}

func _JailHost_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JailHostServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.JailHost/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JailHostServer).Start(ctx, req.(*Jail))
	}
	return interceptor(ctx, in, info, handler)
}

func _JailHost_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JailHostServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.JailHost/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JailHostServer).Stop(ctx, req.(*Jail))
	}
	return interceptor(ctx, in, info, handler)
}

// JailHost_ServiceDesc is the grpc.ServiceDesc for JailHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JailHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.JailHost",
	HandlerType: (*JailHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _JailHost_List_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _JailHost_Restart_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _JailHost_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JailHost_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/agent/agent.proto",
}

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	RunPuppetAgent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandResult, error)
	PackageUpgrade(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandResult, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) RunPuppetAgent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.Node/RunPuppetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) PackageUpgrade(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.Node/PackageUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	RunPuppetAgent(context.Context, *Empty) (*CommandResult, error)
	PackageUpgrade(context.Context, *Empty) (*CommandResult, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) RunPuppetAgent(context.Context, *Empty) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPuppetAgent not implemented")
}
func (UnimplementedNodeServer) PackageUpgrade(context.Context, *Empty) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PackageUpgrade not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_RunPuppetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RunPuppetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Node/RunPuppetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RunPuppetAgent(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_PackageUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).PackageUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Node/PackageUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).PackageUpgrade(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunPuppetAgent",
			Handler:    _Node_RunPuppetAgent_Handler,
		},
		{
			MethodName: "PackageUpgrade",
			Handler:    _Node_PackageUpgrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/agent/agent.proto",
}

// BuildClient is the client API for Build service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildClient interface {
	BuildTag(ctx context.Context, in *BuildSpec, opts ...grpc.CallOption) (*CommandResult, error)
	BuildCommit(ctx context.Context, in *BuildSpec, opts ...grpc.CallOption) (*CommandResult, error)
}

type buildClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildClient(cc grpc.ClientConnInterface) BuildClient {
	return &buildClient{cc}
}

func (c *buildClient) BuildTag(ctx context.Context, in *BuildSpec, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.Build/BuildTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildClient) BuildCommit(ctx context.Context, in *BuildSpec, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, "/agent.Build/BuildCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildServer is the server API for Build service.
// All implementations must embed UnimplementedBuildServer
// for forward compatibility
type BuildServer interface {
	BuildTag(context.Context, *BuildSpec) (*CommandResult, error)
	BuildCommit(context.Context, *BuildSpec) (*CommandResult, error)
	mustEmbedUnimplementedBuildServer()
}

// UnimplementedBuildServer must be embedded to have forward compatible implementations.
type UnimplementedBuildServer struct {
}

func (UnimplementedBuildServer) BuildTag(context.Context, *BuildSpec) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildTag not implemented")
}
func (UnimplementedBuildServer) BuildCommit(context.Context, *BuildSpec) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildCommit not implemented")
}
func (UnimplementedBuildServer) mustEmbedUnimplementedBuildServer() {}

// UnsafeBuildServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildServer will
// result in compilation errors.
type UnsafeBuildServer interface {
	mustEmbedUnimplementedBuildServer()
}

func RegisterBuildServer(s grpc.ServiceRegistrar, srv BuildServer) {
	s.RegisterService(&Build_ServiceDesc, srv)
}

func _Build_BuildTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServer).BuildTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Build/BuildTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServer).BuildTag(ctx, req.(*BuildSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Build_BuildCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServer).BuildCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Build/BuildCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServer).BuildCommit(ctx, req.(*BuildSpec))
	}
	return interceptor(ctx, in, info, handler)
}

// Build_ServiceDesc is the grpc.ServiceDesc for Build service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Build_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Build",
	HandlerType: (*BuildServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildTag",
			Handler:    _Build_BuildTag_Handler,
		},
		{
			MethodName: "BuildCommit",
			Handler:    _Build_BuildCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/agent/agent.proto",
}
